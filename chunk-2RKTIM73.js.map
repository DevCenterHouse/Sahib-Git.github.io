{
  "version": 3,
  "sources": ["apps/findqo-ireland/src/app/core/constants/pricing.constants.ts", "apps/findqo-ireland/src/app/core/constants/bedroom.constants.ts", "apps/findqo-ireland/src/app/core/constants/bathroom.constants.ts", "apps/findqo-ireland/src/app/core/constants/property-size.constants.ts", "apps/findqo-ireland/src/app/core/constants/tenant-preferences.constants.ts", "apps/findqo-ireland/src/app/core/constants/furnishing.constants.ts", "apps/findqo-ireland/src/app/core/constants/room-types.constants.ts", "apps/findqo-ireland/src/app/core/constants/tenants.constants.ts", "apps/findqo-ireland/src/app/feature/general/filters/filters.facade.ts"],
  "sourcesContent": ["import { FilterValue, FilterDropdownValue } from '@core/models';\n\nconst PRICE_VALUES: FilterDropdownValue[] = [\n\t{\n\t\tid: '1',\n\t\tname: 'All',\n\t},\n\t{\n\t\tid: '2',\n\t\tname: '0',\n\t},\n\t{\n\t\tid: '12',\n\t\tname: '25,000',\n\t},\n\t{\n\t\tid: '13',\n\t\tname: '50,000',\n\t},\n\t{\n\t\tid: '24',\n\t\tname: '75,000',\n\t},\n\t{\n\t\tid: '21',\n\t\tname: '100,000',\n\t},\n\t{\n\t\tid: '25',\n\t\tname: '125,000',\n\t},\n\t{\n\t\tid: '26',\n\t\tname: '150,000',\n\t},\n\t{\n\t\tid: '27',\n\t\tname: '175,000',\n\t},\n\t{\n\t\tid: '28',\n\t\tname: '200,000',\n\t},\n\t{\n\t\tid: '29',\n\t\tname: '225,000',\n\t},\n\t{\n\t\tid: '22',\n\t\tname: '250,000',\n\t},\n\t{\n\t\tid: '30',\n\t\tname: '275,000',\n\t},\n\t{\n\t\tid: '31',\n\t\tname: '300,000',\n\t},\n\t{\n\t\tid: '32',\n\t\tname: '325,000',\n\t},\n\t{\n\t\tid: '33',\n\t\tname: '350,000',\n\t},\n\t{\n\t\tid: '34',\n\t\tname: '375,000',\n\t},\n\t{\n\t\tid: '35',\n\t\tname: '400,000',\n\t},\n\t{\n\t\tid: '36',\n\t\tname: '425,000',\n\t},\n\t{\n\t\tid: '37',\n\t\tname: '450,000',\n\t},\n\t{\n\t\tid: '38',\n\t\tname: '475,000',\n\t},\n\t{\n\t\tid: '23',\n\t\tname: '500,000',\n\t},\n\t{\n\t\tid: '39',\n\t\tname: '525,000',\n\t},\n\t{\n\t\tid: '40',\n\t\tname: '550,000',\n\t},\n\t{\n\t\tid: '41',\n\t\tname: '575,000',\n\t},\n\t{\n\t\tid: '42',\n\t\tname: '600,000',\n\t},\n\t{\n\t\tid: '43',\n\t\tname: '625,000',\n\t},\n\t{\n\t\tid: '44',\n\t\tname: '650,000',\n\t},\n\t{\n\t\tid: '45',\n\t\tname: '675,000',\n\t},\n\t{\n\t\tid: '46',\n\t\tname: '700,000',\n\t},\n\t{\n\t\tid: '47',\n\t\tname: '725,000',\n\t},\n\t{\n\t\tid: '48',\n\t\tname: '750,000',\n\t},\n\t{\n\t\tid: '49',\n\t\tname: '775,000',\n\t},\n\t{\n\t\tid: '50',\n\t\tname: '800,000',\n\t},\n\t{\n\t\tid: '51',\n\t\tname: '825,000',\n\t},\n\t{\n\t\tid: '52',\n\t\tname: '850,000',\n\t},\n\t{\n\t\tid: '53',\n\t\tname: '875,000',\n\t},\n\t{\n\t\tid: '54',\n\t\tname: '900,000',\n\t},\n\t{\n\t\tid: '55',\n\t\tname: '925,000',\n\t},\n\t{\n\t\tid: '56',\n\t\tname: '950,000',\n\t},\n\t{\n\t\tid: '57',\n\t\tname: '975,000',\n\t},\n\t{\n\t\tid: '58',\n\t\tname: '1,000,000',\n\t},\n\t{\n\t\tid: '59',\n\t\tname: '1,100,000',\n\t},\n\t{\n\t\tid: '60',\n\t\tname: '1,200,000',\n\t},\n\t{\n\t\tid: '61',\n\t\tname: '1,300,000',\n\t},\n\t{\n\t\tid: '62',\n\t\tname: '1,400,000',\n\t},\n\t{\n\t\tid: '63',\n\t\tname: '1,500,000',\n\t},\n\t{\n\t\tid: '64',\n\t\tname: '1,600,000',\n\t},\n\t{\n\t\tid: '65',\n\t\tname: '1,700,000',\n\t},\n\t{\n\t\tid: '66',\n\t\tname: '1,800,000',\n\t},\n\t{\n\t\tid: '67',\n\t\tname: '1,900,000',\n\t},\n\t{\n\t\tid: '68',\n\t\tname: '2,000,000',\n\t},\n\t{\n\t\tid: '69',\n\t\tname: '2,100,000',\n\t},\n\t{\n\t\tid: '70',\n\t\tname: '2,200,000',\n\t},\n\t{\n\t\tid: '71',\n\t\tname: '2,300,000',\n\t},\n\t{\n\t\tid: '72',\n\t\tname: '2,400,000',\n\t},\n\t{\n\t\tid: '73',\n\t\tname: '2,500,000',\n\t},\n\t{\n\t\tid: '74',\n\t\tname: '2,600,000',\n\t},\n\t{\n\t\tid: '75',\n\t\tname: '2,700,000',\n\t},\n\t{\n\t\tid: '76',\n\t\tname: '2,800,000',\n\t},\n\t{\n\t\tid: '77',\n\t\tname: '2,900,000',\n\t},\n\t{\n\t\tid: '78',\n\t\tname: '3,000,000',\n\t},\n\t{\n\t\tid: '79',\n\t\tname: '3,100,000',\n\t},\n\t{\n\t\tid: '80',\n\t\tname: '3,200,000',\n\t},\n\t{\n\t\tid: '81',\n\t\tname: '3,300,000',\n\t},\n\t{\n\t\tid: '82',\n\t\tname: '3,400,000',\n\t},\n\t{\n\t\tid: '83',\n\t\tname: '3,500,000',\n\t},\n\t{\n\t\tid: '84',\n\t\tname: '3,600,000',\n\t},\n\t{\n\t\tid: '85',\n\t\tname: '3,700,000',\n\t},\n\t{\n\t\tid: '86',\n\t\tname: '3,800,000',\n\t},\n\t{\n\t\tid: '87',\n\t\tname: '3,900,000',\n\t},\n\t{\n\t\tid: '88',\n\t\tname: '4,000,000',\n\t},\n\t{\n\t\tid: '89',\n\t\tname: '4,100,000',\n\t},\n\t{\n\t\tid: '90',\n\t\tname: '4,200,000',\n\t},\n\t{\n\t\tid: '91',\n\t\tname: '4,300,000',\n\t},\n\t{\n\t\tid: '92',\n\t\tname: '4,400,000',\n\t},\n\t{\n\t\tid: '93',\n\t\tname: '4,500,000',\n\t},\n\t{\n\t\tid: '94',\n\t\tname: '4,600,000',\n\t},\n\t{\n\t\tid: '95',\n\t\tname: '4,700,000',\n\t},\n\t{\n\t\tid: '96',\n\t\tname: '4,800,000',\n\t},\n\t{\n\t\tid: '97',\n\t\tname: '4,900,000',\n\t},\n\t{\n\t\tid: '98',\n\t\tname: '5,000,000',\n\t},\n\t{\n\t\tid: '99',\n\t\tname: '5,100,000',\n\t},\n\t{\n\t\tid: '100',\n\t\tname: '5,200,000',\n\t},\n\t{\n\t\tid: '101',\n\t\tname: '5,300,000',\n\t},\n\t{\n\t\tid: '102',\n\t\tname: '5,400,000',\n\t},\n\t{\n\t\tid: '103',\n\t\tname: '5,500,000',\n\t},\n];\n\nexport const PRICING_FILTER_VALUES = Object.assign(PRICE_VALUES, {\n\tpopulars: [],\n\tall: PRICE_VALUES,\n}) as FilterValue;\n", "import { FilterValue, FilterDropdownValue } from '@core/models';\n\nconst BEDROOM_VALUES: FilterDropdownValue[] = [\n\t{\n\t\tid: '8',\n\t\tname: '0',\n\t},\n\t{\n\t\tid: '1',\n\t\tname: '1',\n\t},\n\t{\n\t\tid: '2',\n\t\tname: '2',\n\t},\n\t{\n\t\tid: '3',\n\t\tname: '3',\n\t},\n\t{\n\t\tid: '4',\n\t\tname: '4',\n\t},\n\t{\n\t\tid: '5',\n\t\tname: '5',\n\t},\n\t{\n\t\tid: '6',\n\t\tname: '6',\n\t},\n\t{\n\t\tid: '7',\n\t\tname: '7+',\n\t},\n];\n\nexport const BEDROOM_FILTER_VALUES = Object.assign(BEDROOM_VALUES, {\n\tpopulars: [],\n\tall: BEDROOM_VALUES,\n}) as FilterValue;\n", "import { FilterValue, FilterDropdownValue } from '@core/models';\n\nconst BATHROOM_VALUES: FilterDropdownValue[] = [\n\t{\n\t\tid: '1',\n\t\tname: '1',\n\t},\n\t{\n\t\tid: '2',\n\t\tname: '2',\n\t},\n\t{\n\t\tid: '3',\n\t\tname: '3',\n\t},\n\t{\n\t\tid: '4',\n\t\tname: '4',\n\t},\n\t{\n\t\tid: '5',\n\t\tname: '5',\n\t},\n\t{\n\t\tid: '6',\n\t\tname: '6+',\n\t},\n];\n\nexport const BATHROOM_FILTER_VALUES = Object.assign(BATHROOM_VALUES, {\n\tpopulars: [],\n\tall: BATHROOM_VALUES,\n}) as FilterValue;\n", "import { FilterValue, FilterDropdownValue } from '@core/models';\n\nconst PROPERTY_SIZE_VALUES: FilterDropdownValue[] = [\n\t{\n\t\tid: '1',\n\t\tname: 'All',\n\t},\n\t{\n\t\tid: '2',\n\t\tname: '10',\n\t},\n\t{\n\t\tid: '3',\n\t\tname: '20',\n\t},\n\t{\n\t\tid: '4',\n\t\tname: '30',\n\t},\n\t{\n\t\tid: '5',\n\t\tname: '40',\n\t},\n\t{\n\t\tid: '6',\n\t\tname: '50',\n\t},\n\t{\n\t\tid: '7',\n\t\tname: '60',\n\t},\n\t{\n\t\tid: '8',\n\t\tname: '70',\n\t},\n\t{\n\t\tid: '9',\n\t\tname: '80',\n\t},\n\t{\n\t\tid: '10',\n\t\tname: '90',\n\t},\n\t{\n\t\tid: '11',\n\t\tname: '100',\n\t},\n\t{\n\t\tid: '12',\n\t\tname: '125',\n\t},\n\t{\n\t\tid: '13',\n\t\tname: '150',\n\t},\n\t{\n\t\tid: '14',\n\t\tname: '175',\n\t},\n\t{\n\t\tid: '15',\n\t\tname: '200',\n\t},\n\t{\n\t\tid: '16',\n\t\tname: '225',\n\t},\n\t{\n\t\tid: '17',\n\t\tname: '250',\n\t},\n\t{\n\t\tid: '18',\n\t\tname: '300',\n\t},\n\t{\n\t\tid: '19',\n\t\tname: '400',\n\t},\n\t{\n\t\tid: '20',\n\t\tname: '500',\n\t},\n\t{\n\t\tid: '21',\n\t\tname: '750',\n\t},\n\t{\n\t\tid: '22',\n\t\tname: '1,000',\n\t},\n\t{\n\t\tid: '23',\n\t\tname: '2,500',\n\t},\n\t{\n\t\tid: '24',\n\t\tname: '5,000',\n\t},\n\t{\n\t\tid: '25',\n\t\tname: '10,000',\n\t},\n];\n\nexport const PROPERTY_SIZE_FILTER_VALUES = Object.assign(PROPERTY_SIZE_VALUES, {\n\tpopulars: [],\n\tall: PROPERTY_SIZE_VALUES,\n}) as FilterValue;\n", "import { FilterValue, FilterDropdownValue } from '@core/models';\n\nconst TENANT_PREFERENCES_VALUES: FilterDropdownValue[] = [\n\t{\n\t\tid: '1',\n\t\tname: 'Males only',\n\t},\n\t{\n\t\tid: '2',\n\t\tname: 'Females only',\n\t},\n\t{\n\t\tid: '3',\n\t\tname: 'Either',\n\t},\n];\n\nexport const TENANT_PREFERENCES_FILTER_VALUES = Object.assign(TENANT_PREFERENCES_VALUES, {\n\tpopulars: [],\n\tall: TENANT_PREFERENCES_VALUES,\n}) as FilterValue;\n", "import { FilterValue, FilterDropdownValue } from '@core/models';\n\nconst FURNISHING_VALUES: FilterDropdownValue[] = [\n\t{\n\t\tid: '1',\n\t\tname: 'Furnished',\n\t},\n\t{\n\t\tid: '2',\n\t\tname: 'Unfurnished',\n\t},\n\t{\n\t\tid: '3',\n\t\tname: 'Semi-furnished',\n\t},\n];\n\nexport const FURNISHING_FILTER_VALUES = Object.assign(FURNISHING_VALUES, {\n\tpopulars: [],\n\tall: FURNISHING_VALUES,\n}) as FilterValue;\n", "import { FilterValue, FilterDropdownValue } from '@core/models';\nimport { AisleType } from '@core/enums';\n\nconst RESIDENTIAL_ROOM_TYPES: FilterDropdownValue[] = [\n\t{\n\t\tid: '1',\n\t\tname: 'Single room',\n\t},\n\t{\n\t\tid: '2',\n\t\tname: 'Double room',\n\t},\n\t{\n\t\tid: '3',\n\t\tname: 'En Suite Double room',\n\t},\n];\n\nconst SHARE_RESIDENTIAL_ROOM_TYPES: FilterDropdownValue[] = [\n\t...RESIDENTIAL_ROOM_TYPES,\n\t{\n\t\tid: '4',\n\t\tname: 'Shared room',\n\t},\n];\n\nexport const getRoomTypesFilterValues = (aisle: string): FilterValue => {\n\tconst roomTypes = aisle === AisleType.SHARE_RESIDENTIAL ? SHARE_RESIDENTIAL_ROOM_TYPES : RESIDENTIAL_ROOM_TYPES;\n\n\treturn Object.assign(roomTypes, {\n\t\tpopulars: [],\n\t\tall: roomTypes,\n\t}) as FilterValue;\n};\n", "import { FilterValue, FilterDropdownValue } from '@core/models';\n\nconst TENANTS_VALUES: FilterDropdownValue[] = [\n\t{\n\t\tid: '1',\n\t\tname: '1',\n\t},\n\t{\n\t\tid: '2',\n\t\tname: '2',\n\t},\n\t{\n\t\tid: '3',\n\t\tname: '3',\n\t},\n\t{\n\t\tid: '4',\n\t\tname: '4',\n\t},\n\t{\n\t\tid: '5',\n\t\tname: '5',\n\t},\n\t{\n\t\tid: '6',\n\t\tname: '6',\n\t},\n\t{\n\t\tid: '7',\n\t\tname: '7',\n\t},\n\t{\n\t\tid: '8',\n\t\tname: '8',\n\t},\n\t{\n\t\tid: '9',\n\t\tname: '9',\n\t},\n];\n\nexport const TENANTS_FILTER_VALUES = Object.assign(TENANTS_VALUES, {\n\tpopulars: [],\n\tall: TENANTS_VALUES,\n}) as FilterValue;\n", "import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Params } from '@angular/router';\nimport { AdsApi } from '@core/data-access/apis/ads.api';\nimport { FiltersApi } from '@core/data-access/apis/filters.api';\nimport { ConfigState } from '@core/data-access/states/config.state';\nimport { SectionsState } from '@core/data-access/states/sections.state';\nimport { Aisle, Filter, FilterDropdownValue, FilterValue, GetAdListResponse, Section, SortBy, Stand } from '@core/models';\nimport { CommonUtil } from '@core/utils/common.util';\nimport { ADS_FILTERS, ADS_FILTER_ORDERS, ADS_OTHER_FILTERS } from '@feature/general/filters/constants/filters.constants';\nimport { AdsState } from '@shared/states/ads.state';\nimport { FiltersState } from '@shared/states/filters.state';\nimport { BehaviorSubject, Observable, combineLatest, firstValueFrom, forkJoin, of } from 'rxjs';\nimport { catchError, filter, finalize, map, switchMap, tap } from 'rxjs/operators';\nimport { AisleType, CountyType, FilterType, SectionType } from '@core/enums';\nimport { FiltersService } from './services/filters.service';\nimport { FiltersUtil } from './utils/filters.utils';\nimport { RouteData } from '@core/services/route.service';\nimport { PRICING_FILTER_VALUES } from '@core/constants/pricing.constants';\nimport { BEDROOM_FILTER_VALUES } from '@core/constants/bedroom.constants';\nimport { BATHROOM_FILTER_VALUES } from '@core/constants/bathroom.constants';\nimport { PROPERTY_SIZE_FILTER_VALUES } from '@core/constants/property-size.constants';\nimport { TENANT_PREFERENCES_FILTER_VALUES } from '@core/constants/tenant-preferences.constants';\nimport { FURNISHING_FILTER_VALUES } from '@core/constants/furnishing.constants';\nimport { getRoomTypesFilterValues } from '@core/constants/room-types.constants';\nimport { TENANTS_FILTER_VALUES } from '@core/constants/tenants.constants';\n\ninterface FiltersViewModel {\n\tfilterList: Filter[];\n\tsectionList: Section[];\n\ttoggleProgressBar: boolean;\n\tsortList: SortBy[];\n\trouteData: RouteData;\n\taisles: Aisle[];\n}\n\n@Injectable({ providedIn: 'root' })\nexport class FiltersFacade {\n\t// TODO: Add more details or create README.md file\n\tconstructor(\n\t\tprivate readonly filtersApi: FiltersApi,\n\t\tprivate readonly filterService: FiltersService,\n\t\tprivate readonly filtersState: FiltersState,\n\t\tprivate readonly sectionState: SectionsState,\n\t\tprivate readonly adsState: AdsState,\n\t\tprivate readonly adsApi: AdsApi,\n\t\tprivate readonly configState: ConfigState\n\t) {}\n\n\tprivate readonly _params$ = new BehaviorSubject<Params>(undefined);\n\tprivate readonly _toggleProgressBar$ = new BehaviorSubject<boolean>(false);\n\tprivate readonly _isRangeSearchEnabled$ = new BehaviorSubject<boolean>(false);\n\n\tgetFiltersViewModel$(routeData$: Observable<RouteData>): Observable<FiltersViewModel> {\n\t\treturn combineLatest({\n\t\t\tfilterList: this.filtersState.filters$,\n\t\t\tsectionList: this.sectionState.sectionList$,\n\t\t\ttoggleProgressBar: this._toggleProgressBar$.asObservable(),\n\t\t\tsortList: this.getSortList$(),\n\t\t\trouteData: routeData$,\n\t\t}).pipe(\n\t\t\tmap(({ filterList, sectionList, toggleProgressBar, sortList, routeData }) => {\n\t\t\t\tconst aisles = sectionList.find((section: Section) => section.reference === routeData[FilterType.SECTION])?.aisles || [];\n\n\t\t\t\treturn {\n\t\t\t\t\tfilterList,\n\t\t\t\t\tsectionList,\n\t\t\t\t\ttoggleProgressBar,\n\t\t\t\t\tsortList,\n\t\t\t\t\trouteData,\n\t\t\t\t\taisles,\n\t\t\t\t};\n\t\t\t})\n\t\t);\n\t}\n\n\tloadFilterList(params: Params): void {\n\t\tthis.filterService.updateLocationField([params[FilterType.LOCATION_REFERENCE]]);\n\t\tthis.filtersState.setIsLoading(true);\n\t\tthis.setToggleProgressBar(true);\n\n\t\t// Get the previous filters list if there's any\n\t\tlet PREVIOUS_FILTER_LIST = undefined;\n\n\t\tif (this.filterService.getFiltersForm()) {\n\t\t\tPREVIOUS_FILTER_LIST = Object.keys(this.filterService.getFiltersForm()?.value);\n\t\t}\n\n\t\tlet filterList = [];\n\t\tlet form: FormGroup;\n\n\t\tthis.filtersApi\n\t\t\t.getFilters(params)\n\t\t\t.pipe(\n\t\t\t\tmap((response: Filter[]) => {\n\t\t\t\t\tconst FILTER_LIST_WITH_CONSTANTS = response\n\t\t\t\t\t\t.map((filterFromResponse: Filter) => {\n\t\t\t\t\t\t\t// Get the Filter constants that are needed from the UI that is not included in the API response.\n\t\t\t\t\t\t\t// Merged the Filter constants from the `GET: /filters` API response.\n\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...this.getFilterConstant(filterFromResponse),\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t})\n\t\t\t\t\t\t// Filter the list that is not saved on the Filters constant\n\t\t\t\t\t\t.filter((filter: Filter) => ADS_FILTERS.some((savedFilter: Filter) => savedFilter.paramName === filter.paramName));\n\n\t\t\t\t\t// Merged the other filters coming with the Filter constants with the filters fetch from the `GET: /filters` API.\n\t\t\t\t\treturn [...FILTER_LIST_WITH_CONSTANTS, ...this.getOtherFilters(params?.[FilterType.AISLE])];\n\t\t\t\t}),\n\t\t\t\tswitchMap((filterListResponse: Filter[]) => {\n\t\t\t\t\tfilterList = filterListResponse;\n\n\t\t\t\t\t// Remove Filter that is not define on our constant by checking it's template type.\n\t\t\t\t\tfilterList = filterList.filter((filter: Filter) => filter?.templateType >= 0);\n\n\t\t\t\t\t// Remove seller type as it's not needed for now\n\t\t\t\t\tfilterList = filterList.filter((filter: Filter) => filter?.paramName !== FilterType.SELLER_TYPE);\n\n\t\t\t\t\tthis.filterService.createFilterForm(filterList, params);\n\t\t\t\t\tform = this.filterService.getFiltersForm();\n\n\t\t\t\t\treturn forkJoin(this.createHttpFilterValues(filterList, form));\n\t\t\t\t}),\n\t\t\t\tfinalize(() => {\n\t\t\t\t\tthis.filtersState.setIsLoading(false);\n\t\t\t\t\tthis.setToggleProgressBar(false);\n\n\t\t\t\t\t// If the Filter list changed, then call the `GET: ads` with the Filters params via updating the route\n\t\t\t\t\tif (PREVIOUS_FILTER_LIST && FiltersUtil.isFilterListChanged(PREVIOUS_FILTER_LIST, filterList)) {\n\t\t\t\t\t\tthis.filterService.updateRoute();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t)\n\t\t\t.subscribe(\n\t\t\t\t(\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\tparamName: string;\n\t\t\t\t\t\tvalues: FilterValue;\n\t\t\t\t\t}[]\n\t\t\t\t) => {\n\t\t\t\t\t// Update County or County area fields\n\t\t\t\t\tthis.checkCountyAreaReference(params, response);\n\n\t\t\t\t\t// Set the Filters state\n\t\t\t\t\tthis.filtersState.setFilters(filterList);\n\n\t\t\t\t\t// Set the Filters order\n\t\t\t\t\tthis.setFiltersOrder(params?.[FilterType.AISLE], filterList);\n\n\t\t\t\t\t// Set the Filters dropdown options\n\t\t\t\t\tfilterList.forEach((filter: Filter, index: number) => {\n\t\t\t\t\t\tconst FILTER_VALUE = response.find((filterResponse) => filterResponse.paramName === filter.paramName);\n\n\t\t\t\t\t\tif (FILTER_VALUE) {\n\t\t\t\t\t\t\tthis.filtersState.updateFilter({\n\t\t\t\t\t\t\t\t...filter,\n\t\t\t\t\t\t\t\tvalues: FILTER_VALUE.values,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Populate the Filter Shelve dropdown value\n\t\t\t\t\t\t// TODO: No shelves for now, check if we need to remove this.\n\t\t\t\t\t\t// if (filter?.childReferenceParamName && filter.paramName === FilterType.STAND) {\n\t\t\t\t\t\t// \tthis.setFilterShelveList(\n\t\t\t\t\t\t// \t\t{\n\t\t\t\t\t\t// \t\t\t...filter,\n\t\t\t\t\t\t// \t\t\tvalues: response[index],\n\t\t\t\t\t\t// \t\t},\n\t\t\t\t\t\t// \t\tform.get(FilterType.STAND).value\n\t\t\t\t\t\t// \t);\n\t\t\t\t\t\t// }\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t}\n\n\tcheckIsLocationCounty(countyList, location) {\n\t\treturn countyList.some((c) => c.reference === location);\n\t}\n\n\tcheckCountyAreaReference(params, response) {\n\t\t// Function to check if it's county\n\t\tconst COUNTY_LIST = response.find((i) => i.paramName === FilterType.COUNTY)?.values?.all;\n\n\t\t// Reference value from param in url\n\t\tconst URL_REFERENCE = params[FilterType?.LOCATION_REFERENCE];\n\n\t\t// If locatio param is ireland then update location field to `All in ireland` value\n\t\tif (URL_REFERENCE === 'ireland') {\n\t\t\tthis.filterService.locations.clear();\n\t\t\treturn;\n\t\t}\n\t}\n\n\tloadFilterListFromSelection(params: Params): void {\n\t\tthis.loadFilterList({ ...this._params$.getValue(), ...params });\n\t}\n\n\t/**\n\t * Create or build a http Observables of `GET: Filter values` for Filters dropdown options\n\t */\n\tcreateHttpFilterValues(\n\t\tfilterList: Filter[],\n\t\tform: FormGroup\n\t): Observable<{\n\t\tparamName: string;\n\t\tvalues: FilterValue;\n\t}>[] {\n\t\treturn filterList.reduce((obs, filter: Filter) => {\n\t\t\tlet parentParamValue = '';\n\n\t\t\t/**\n\t\t\t * Get the parent param value if has child reference.\n\t\t\t *\n\t\t\t * e.g.\n\t\t\t * Stand and Shelf\n\t\t\t */\n\t\t\tif (filter.paramName === FilterType.STAND) {\n\t\t\t\tparentParamValue = this._params$.getValue()[filter.requestParamName];\n\t\t\t} else if (form) {\n\t\t\t\tparentParamValue = form.get(filter.parentReferenceParamName)?.value;\n\t\t\t}\n\n\t\t\tlet params = filter?.requestParamName ? { [filter.requestParamName]: parentParamValue } : null;\n\n\t\t\t/**\n\t\t\t * Handle the Filter child reference that needed a value of Filter parent param.\n\t\t\t *\n\t\t\t * If the `GET: filter value` needs a request param and param value is null or empty,\n\t\t\t * then don't call the `GET: filter value` and just pass a empty array.\n\t\t\t */\n\t\t\tif (filter?.requestParamName && !parentParamValue) {\n\t\t\t\tobs.push(\n\t\t\t\t\tof([]).pipe(\n\t\t\t\t\t\tmap(() => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tparamName: filter.paramName,\n\t\t\t\t\t\t\t\tvalues: [],\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\treturn obs;\n\t\t\t}\n\n\t\t\t// Fetch the Stand values from the Section state\n\t\t\tif (filter.paramName === FilterType.STAND) {\n\t\t\t\tconst STANDS = this.sectionState.getStands(this._params$.getValue()[FilterType.SECTION], this._params$.getValue()[FilterType.AISLE]);\n\n\t\t\t\tobs.push(\n\t\t\t\t\tof(STANDS).pipe(\n\t\t\t\t\t\tmap(() => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tparamName: filter.paramName,\n\t\t\t\t\t\t\t\tvalues: STANDS,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\treturn obs;\n\t\t\t}\n\n\t\t\t// Add selected section and aisle in the params\n\t\t\tparams = {\n\t\t\t\t...params,\n\t\t\t\t[FilterType.SECTION]: this.getParams()[FilterType.SECTION],\n\t\t\t\t[FilterType.AISLE]: this.getParams()[FilterType.AISLE],\n\t\t\t};\n\n\t\t\tif (filter.paramName === FilterType.COUNTY) {\n\t\t\t\treturn obs;\n\t\t\t}\n\n\t\t\t// Use constant for price filter instead of API call\n\t\t\tif (filter.paramName === FilterType.PRICE) {\n\t\t\t\tobs.push(\n\t\t\t\t\tof(PRICING_FILTER_VALUES).pipe(\n\t\t\t\t\t\tmap((value: FilterValue) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tparamName: filter.paramName,\n\t\t\t\t\t\t\t\tvalues: value,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\treturn obs;\n\t\t\t}\n\n\t\t\t// Use constant for bedroom filter instead of API call\n\t\t\tif (filter.paramName === FilterType.BEDROOM_COUNT) {\n\t\t\t\tobs.push(\n\t\t\t\t\tof(BEDROOM_FILTER_VALUES).pipe(\n\t\t\t\t\t\tmap((value: FilterValue) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tparamName: filter.paramName,\n\t\t\t\t\t\t\t\tvalues: value.map((dropdownValue: FilterDropdownValue) => {\n\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t...dropdownValue,\n\t\t\t\t\t\t\t\t\t\tname: dropdownValue.name === '0' ? 'Studio' : dropdownValue.name,\n\t\t\t\t\t\t\t\t\t\tid: dropdownValue.id === '8' ? '0' : dropdownValue.id,\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\treturn obs;\n\t\t\t}\n\n\t\t\t// Use constant for bathroom filter instead of API call\n\t\t\tif (filter.paramName === FilterType.BATHROOM_COUNT) {\n\t\t\t\tobs.push(\n\t\t\t\t\tof(BATHROOM_FILTER_VALUES).pipe(\n\t\t\t\t\t\tmap((value: FilterValue) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tparamName: filter.paramName,\n\t\t\t\t\t\t\t\tvalues: value,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\treturn obs;\n\t\t\t}\n\n\t\t\t// Use constant for property size filter instead of API call\n\t\t\tif (filter.paramName === FilterType.PROPERTY_SIZES) {\n\t\t\t\tobs.push(\n\t\t\t\t\tof(PROPERTY_SIZE_FILTER_VALUES).pipe(\n\t\t\t\t\t\tmap((value: FilterValue) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tparamName: filter.paramName,\n\t\t\t\t\t\t\t\tvalues: value,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\treturn obs;\n\t\t\t}\n\n\t\t\t// Use constant for tenant preferences filter instead of API call\n\t\t\tif (filter.paramName === FilterType.TENANT_PREFERENCE) {\n\t\t\t\tobs.push(\n\t\t\t\t\tof(TENANT_PREFERENCES_FILTER_VALUES).pipe(\n\t\t\t\t\t\tmap((value: FilterValue) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tparamName: filter.paramName,\n\t\t\t\t\t\t\t\tvalues: value,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\treturn obs;\n\t\t\t}\n\n\t\t\t// Use constant for furnishing filter instead of API call\n\t\t\tif (filter.paramName === FilterType.FURNISHING) {\n\t\t\t\tobs.push(\n\t\t\t\t\tof(FURNISHING_FILTER_VALUES).pipe(\n\t\t\t\t\t\tmap((value: FilterValue) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tparamName: filter.paramName,\n\t\t\t\t\t\t\t\tvalues: value,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\treturn obs;\n\t\t\t}\n\n\t\t\t// Use constant for room types filter instead of API call\n\t\t\tif (filter.paramName === FilterType.ROOM_TYPE) {\n\t\t\t\tconst aisle = this.getParams()[FilterType.AISLE];\n\t\t\t\tobs.push(\n\t\t\t\t\tof(getRoomTypesFilterValues(aisle)).pipe(\n\t\t\t\t\t\tmap((value: FilterValue) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tparamName: filter.paramName,\n\t\t\t\t\t\t\t\tvalues: value,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\treturn obs;\n\t\t\t}\n\n\t\t\t// Use constant for tenants filter instead of API call\n\t\t\tif (filter.paramName === FilterType.OTHER_TENANT_SHARE_COUNT) {\n\t\t\t\tobs.push(\n\t\t\t\t\tof(TENANTS_FILTER_VALUES).pipe(\n\t\t\t\t\t\tmap((value: FilterValue) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tparamName: filter.paramName,\n\t\t\t\t\t\t\t\tvalues: value,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\treturn obs;\n\t\t\t}\n\n\t\t\tif (filter?.valuesEndpoint) {\n\t\t\t\tobs.push(\n\t\t\t\t\tthis.filtersApi.getFilterValue(filter.valuesEndpoint, params).pipe(\n\t\t\t\t\t\tmap((value: FilterValue) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tparamName: filter.paramName,\n\t\t\t\t\t\t\t\tvalues: value,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tcatchError(() => of([]))\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn obs;\n\t\t}, []);\n\t}\n\n\tgetFilter(paramName: string): Filter {\n\t\tconst LAST_THREE_CHARS = paramName.substring(paramName.length - 3);\n\n\t\tif (LAST_THREE_CHARS === 'Min' || LAST_THREE_CHARS === 'Max') {\n\t\t\tparamName = paramName.substring(0, paramName.length - 3);\n\t\t}\n\n\t\treturn this.getFilterList().find((filter: Filter) => filter.paramName === paramName);\n\t}\n\n\tgetSection(section: SectionType): Section {\n\t\treturn this.sectionState.getSection(section);\n\t}\n\n\tupdateFilter(filter: Filter): void {\n\t\tthis.filtersState.updateFilter(filter);\n\t}\n\n\tremoveFilterValues(paramName: string): void {\n\t\tthis.filtersState.removeFilterValues(paramName);\n\t}\n\n\t/**\n\t * This is for Form controls\n\t *\n\t * @param http\n\t * @param form\n\t * @param paramName\n\t * @returns\n\t */\n\thttpGetControlValues(http: Observable<any>, form: FormGroup, paramName: string): Observable<any> {\n\t\treturn http.pipe(\n\t\t\tmap((response: any) => response.data || []),\n\t\t\ttap((controlValues: any) => {\n\t\t\t\tif (controlValues.length) {\n\t\t\t\t\t// form.get(paramName).enable();\n\t\t\t\t} else {\n\t\t\t\t\t// form.get(paramName).disable();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Load Filter dropdown value list\n\t *\n\t * @param filter\n\t * @returns\n\t */\n\tloadFilterDropdownValueList(filter: Filter, form: FormGroup): Promise<FilterValue> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tlet parentParamValue = '';\n\t\t\t\tlet response: FilterValue;\n\n\t\t\t\tif (filter.paramName === FilterType.COUNTY) {\n\t\t\t\t\tresolve(response);\n\t\t\t\t}\n\n\t\t\t\tif (filter.paramName === FilterType.STAND) {\n\t\t\t\t\tparentParamValue = this._params$.getValue()[filter.requestParamName];\n\t\t\t\t} else {\n\t\t\t\t\tparentParamValue = form.get(filter.parentReferenceParamName)?.value;\n\t\t\t\t}\n\n\t\t\t\t// Use constant for price filter instead of API call\n\t\t\t\tif (filter.paramName === FilterType.PRICE) {\n\t\t\t\t\tresponse = PRICING_FILTER_VALUES;\n\t\t\t\t} else {\n\t\t\t\t\tfirstValueFrom(\n\t\t\t\t\t\tthis.filtersApi.getFilterValue(filter.valuesEndpoint, {\n\t\t\t\t\t\t\t...(!!filter?.requestParamName && { [filter.requestParamName]: parentParamValue }),\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\tthis.filtersState.updateFilter({\n\t\t\t\t\t\t\t\t...filter,\n\t\t\t\t\t\t\t\tvalues: response,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tresolve(response);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\treject([]);\n\t\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.filtersState.updateFilter({\n\t\t\t\t\t...filter,\n\t\t\t\t\tvalues: response,\n\t\t\t\t});\n\n\t\t\t\tresolve(response);\n\t\t\t} catch (error) {\n\t\t\t\treject([]);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Load all Filters dropdown value List\n\t *\n\t * @param filterList\n\t */\n\tloadAllFilterDropdownValueList(filterList: Filter[], form: FormGroup): void {\n\t\tthis.filtersState.setIsFilterValueLoading(true);\n\n\t\t// `GET: Filter values`\n\t\tforkJoin(this.createHttpFilterValues(filterList, form))\n\t\t\t.pipe(finalize(() => this.filtersState.setIsFilterValueLoading(false)))\n\t\t\t.subscribe((response: []) => {\n\t\t\t\tfilterList.forEach((filter: Filter, index: number) => {\n\t\t\t\t\tthis.filtersState.updateFilter({\n\t\t\t\t\t\t...filter,\n\t\t\t\t\t\tvalues: response[index],\n\t\t\t\t\t});\n\n\t\t\t\t\t// Repopulate the Filter Shelve dropdown value\n\t\t\t\t\t// TODO: No shelves for now, check if we need to remove this.\n\t\t\t\t\t// if (filter?.childReferenceParamName && filter.paramName === FilterType.STAND) {\n\t\t\t\t\t// \tthis.setFilterShelveList(\n\t\t\t\t\t// \t\t{\n\t\t\t\t\t// \t\t\t...filter,\n\t\t\t\t\t// \t\t\tvalues: response[index],\n\t\t\t\t\t// \t\t},\n\t\t\t\t\t// \t\tform.get(FilterType.STAND).value\n\t\t\t\t\t// \t);\n\t\t\t\t\t// }\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\tloadAdsCount(formValue: Params) {\n\t\tthis.setToggleProgressBar(true);\n\n\t\tconst PARAMS = this._params$.getValue();\n\t\tconst UNIQUES_LOCATIONS = [...new Set(this.filterService.locations.value.join(',').split(','))];\n\n\t\tthis.adsApi\n\t\t\t.getAdList({\n\t\t\t\t...CommonUtil.removeEmptyQueryParams(formValue),\n\t\t\t\tsection: PARAMS[FilterType.SECTION],\n\t\t\t\taisle: PARAMS[FilterType.AISLE],\n\t\t\t\t...(UNIQUES_LOCATIONS[0] === CountyType.DEFAULT ? {} : { location: UNIQUES_LOCATIONS.join(',') }),\n\t\t\t\tcount: 1,\n\t\t\t})\n\t\t\t.pipe(\n\t\t\t\tmap((response: GetAdListResponse) => response.meta.total),\n\t\t\t\tcatchError(() => of(0)),\n\t\t\t\tfinalize(() => this.setToggleProgressBar(false))\n\t\t\t)\n\t\t\t.subscribe((count: number) => this.adsState.setAdsCount(count));\n\t}\n\n\t/**\n\t * Set the Filter Shelve list based on the selected Stand.\n\t *\n\t * @param filter Stand Filter\n\t * @param selectedStand Selected Filter Stand\n\t */\n\tsetFilterShelveList(filter: Filter, selectedStand: string): void {\n\t\tconst CHILD_FILTER = this.getFilter(filter?.childReferenceParamName);\n\t\tconst STAND = filter.values.find((stand: Stand) => stand.reference === selectedStand) as Stand;\n\n\t\tthis.updateFilter({\n\t\t\t...CHILD_FILTER,\n\t\t\tvalues: STAND?.shelves || ([] as FilterValue),\n\t\t});\n\t}\n\n\tresetFacade(): void {\n\t\tthis.filtersState.setFilters([]);\n\t\tthis._params$.next(undefined);\n\t\tthis._toggleProgressBar$.next(false);\n\t\tthis._isRangeSearchEnabled$.next(false);\n\t}\n\n\t/**\n\t * Getter and Setters\n\t */\n\tgetFilterList(): Filter[] {\n\t\treturn this.filtersState.getFilters();\n\t}\n\n\tisFiltersValueLoading$(): Observable<boolean> {\n\t\treturn this.filtersState.isFiltersValueLoading$;\n\t}\n\n\tisFiltersLoading$(): Observable<boolean> {\n\t\treturn this.filtersState.isLoading$;\n\t}\n\n\tsetParams(params: Params): void {\n\t\treturn this._params$.next(params);\n\t}\n\n\tgetParams(): Params {\n\t\treturn this._params$.getValue();\n\t}\n\n\tgetToggleProggresBar$(): Observable<boolean> {\n\t\treturn this._toggleProgressBar$.asObservable();\n\t}\n\n\tsetToggleProgressBar(toggleProgressBar: boolean): void {\n\t\tthis._toggleProgressBar$.next(toggleProgressBar);\n\t}\n\n\tgetIsRangeSearchEnabled$(): Observable<boolean> {\n\t\treturn this._isRangeSearchEnabled$.asObservable();\n\t}\n\n\tgetIsRangeSearchEnabled(): boolean {\n\t\treturn this._isRangeSearchEnabled$.getValue();\n\t}\n\n\tsetIsRangeSearchEnabled(isRangeSearchEnabled: boolean): void {\n\t\tthis._isRangeSearchEnabled$.next(isRangeSearchEnabled);\n\t}\n\n\tgetSelectedFilterCount$(): Observable<number> {\n\t\treturn this.filtersState.selectedFilterCount$;\n\t}\n\n\tgetAdsCount$(): Observable<number> {\n\t\treturn this.adsState.adsCount$;\n\t}\n\n\tgetSortList$(): Observable<SortBy[]> {\n\t\treturn this.sectionState.sectionList$.pipe(\n\t\t\tfilter((sectionList: Section[]) => !!sectionList?.length),\n\t\t\tmap(() => {\n\t\t\t\tconst PARAMS = this._params$.getValue();\n\n\t\t\t\treturn (\n\t\t\t\t\tthis.sectionState.getAisle(PARAMS?.[FilterType.SECTION] ?? SectionType.PROPERTIES_FOR_RENT, PARAMS?.[FilterType.AISLE] ?? AisleType.RENT_RESIDENTIAL)\n\t\t\t\t\t\t?.sorts || []\n\t\t\t\t);\n\t\t\t})\n\t\t);\n\t}\n\n\tsetFilterList(filterList: Filter[]): void {\n\t\tthis.filtersState.setFilters(filterList);\n\t}\n\n\t/**\n\t * Private methods\n\t */\n\n\tprivate getFilterConstant(currentFilter: Filter): Filter {\n\t\tconst UPDATED_FILTER = ADS_FILTERS.find((filter: Filter) => filter.paramName === currentFilter.paramName);\n\n\t\treturn {\n\t\t\t...UPDATED_FILTER,\n\t\t\t...currentFilter,\n\t\t\tisMinMax: !!+currentFilter.isMinMax,\n\t\t};\n\t}\n\n\t/**\n\t * Get the other filters that need to be added to the UI if needed based on the selected aisle\n\t *\n\t * @param aisle\n\t * @returns\n\t */\n\tprivate getOtherFilters(aisle: string): Filter[] {\n\t\tconst OTHER_FILTERS = ADS_OTHER_FILTERS.find((otherFilter: any) => otherFilter.aisle === aisle)?.filters || [];\n\n\t\treturn OTHER_FILTERS;\n\t}\n\n\t/**\n\t * Set the order of filters\n\t */\n\tprivate setFiltersOrder(currentAisle: string, filters: Filter[]): void {\n\t\tif (currentAisle) {\n\t\t\t// Get the filters order of the selected aisle.\n\t\t\tconst ORDERS = ADS_FILTER_ORDERS.find((order: any) => order.aisle === currentAisle).orders;\n\n\t\t\tif (ORDERS) {\n\t\t\t\t// Get the filters that will be appended with sorted filters. These filters are not included in sorting.\n\t\t\t\tconst TO_BE_APPEND_FILTERS = filters.filter((filter: Filter) => !ORDERS.includes(filter.paramName));\n\n\t\t\t\t// Get the filters that needed to be sorted.\n\t\t\t\tconst TO_BE_SORT_FILTERS = filters.filter((filter: Filter) => ORDERS.includes(filter.paramName));\n\n\t\t\t\t// Sort the filters by the given order of the selected aisle.\n\t\t\t\tconst SORTED_FILTERS = TO_BE_SORT_FILTERS.sort(\n\t\t\t\t\t(filterA: Filter, filterB: Filter) => ORDERS.indexOf(filterA.paramName) - ORDERS.indexOf(filterB.paramName)\n\t\t\t\t);\n\n\t\t\t\t// Merge the sorted filters and the filters that are not included in sorting.\n\t\t\t\tthis.filtersState.setFilters([...SORTED_FILTERS, ...TO_BE_APPEND_FILTERS]);\n\t\t\t}\n\t\t}\n\t}\n\n\t// private async getFilterValues(filters: Filter[]): Promise<Filter[]> {\n\t// \tconst HTTP_GET_FILTER_VALUES = this.httpGetFilterValues(filters);\n\t// \tconst FILTER_VALUES = await firstValueFrom(forkJoin(HTTP_GET_FILTER_VALUES));\n\n\t// \treturn filters.map((filter: Filter) => {\n\t// \t\tconst FILTER_VALUE_INDEX = FILTER_VALUES.findIndex((value: any) => value.paramName === filter.paramName);\n\n\t// \t\treturn {\n\t// \t\t\t...filter,\n\t// \t\t\t...(FILTER_VALUE_INDEX > -1 && { values: FILTER_VALUES[FILTER_VALUE_INDEX].values }),\n\t// \t\t};\n\t// \t});\n\t// }\n\n\t/**\n\t * This is for Filters\n\t *\n\t * @param filters\n\t * @returns\n\t */\n\t// private httpGetFilterValues(filters: Filter[]): Observable<any>[] {\n\t// \treturn (\n\t// \t\tfilters\n\t// \t\t\t.filter((filter: Filter) => !filter.isMinMax && filter?.valuesEndpoint && !filter?.hasReference)\n\t// \t\t\t.map((filter: Filter) => {\n\t// \t\t\t\treturn this.filtersApi.getFilterValues(filter.valuesEndpoint).pipe(\n\t// \t\t\t\t\tmap((response: any) => {\n\t// \t\t\t\t\t\treturn {\n\t// \t\t\t\t\t\t\tvalues: [{ id: null, name: filter.placeholder }, ...response.data],\n\t// \t\t\t\t\t\t\tparamName: filter.paramName,\n\t// \t\t\t\t\t\t};\n\t// \t\t\t\t\t})\n\t// \t\t\t\t);\n\t// \t\t\t}) || []\n\t// \t);\n\t// }\n\n\t// getDynamicFormControl(controls: DynamicFormControl[], paramName: string): DynamicFormControl {\n\t// \tconst LAST_THREE_CHARS = paramName.substring(paramName.length - 3);\n\n\t// \tif (LAST_THREE_CHARS === 'Min' || LAST_THREE_CHARS === 'Max') {\n\t// \t\tparamName = paramName.substring(0, paramName.length - 3);\n\t// \t}\n\n\t// \treturn controls.find((control: DynamicFormControl) => control.paramName === paramName);\n\t// }\n\n\t// setFiltersChips(queryParams: Params, form: FormGroup): void {\n\t// \tconst FILTERS_CHIPS = Object.entries(queryParams).reduce((filtersChips, [key, value]) => {\n\t// \t\tconst CONTROL = this.getDynamicFormControl(this.filtersState.getFilters(), key);\n\n\t// \t\tif (value && !CONTROL?.isMinMax && CONTROL?.values) {\n\t// \t\t\t// Get the value name from the Control selected value.\n\t// \t\t\tconst SELECTED_VALUE = CONTROL.values.find((controlValue) => controlValue.id === value);\n\n\t// \t\t\tfiltersChips.push({ paramName: CONTROL.paramName, referenceId: CONTROL?.childReferenceParamName, label: SELECTED_VALUE?.name, isMinMax: false });\n\t// \t\t} else if (value && CONTROL?.isMinMax) {\n\t// \t\t\tconst MAX_VALUE = form.get(`${CONTROL.paramName}Max`).value || 'Max';\n\t// \t\t\tconst MIN_VALUE = form.get(`${CONTROL.paramName}Min`).value || '0';\n\t// \t\t\tconst LABEL = `${MIN_VALUE} - ${MAX_VALUE} ${CONTROL.label}`;\n\t// \t\t\tconst FILTERS_CHIP_INDEX = filtersChips.findIndex((filtersChip: FiltersChip) => filtersChip.paramName === CONTROL.paramName);\n\n\t// \t\t\t// If the Filters chip is exists, then just update the value, else push a new value.\n\t// \t\t\tif (FILTERS_CHIP_INDEX >= 0) {\n\t// \t\t\t\tfiltersChips[FILTERS_CHIP_INDEX] = { paramName: CONTROL.paramName, label: LABEL, isMinMax: true };\n\t// \t\t\t} else {\n\t// \t\t\t\tfiltersChips.push({ paramName: CONTROL.paramName, label: LABEL, isMinMax: true });\n\t// \t\t\t}\n\t// \t\t}\n\n\t// \t\treturn filtersChips;\n\t// \t}, []);\n\n\t// \tthis.filtersState.setFiltersChips([...FILTERS_CHIPS]);\n\t// }\n\n\tonControlChange(filter: Filter, form: FormGroup): void {\n\t\t// If the Filter has a reference then the dropdown values will be reset/cleared.\n\t\t// if (filter?.childReferenceParamName) {\n\t\t// \tthis.removeFilterValues(filter?.childReferenceParamName);\n\t\t// \tif (!form.get(filter.paramName).value) {\n\t\t// \t\tform.get(filter.childReferenceParamName).patchValue(null);\n\t\t// \t\tform.updateValueAndValidity();\n\t\t// \t}\n\t\t// }\n\t\t// if (filter?.paramName === FilterType.STAND && form.get(filter?.paramName).value) {\n\t\t// \tconst STAND = form.get(filter?.paramName).value;\n\t\t// \tconst SHELF_CONTROL = this.getFilter(FilterType.SHELF);\n\t\t// \tthis.httpGetControlValues(\n\t\t// \t\tthis.filtersApi.getShelves({\n\t\t// \t\t\tstand: STAND,\n\t\t// \t\t}),\n\t\t// \t\tform,\n\t\t// \t\tSHELF_CONTROL.paramName\n\t\t// \t).subscribe((shelves: any) => {\n\t\t// \t\t// (SHELF_CONTROL.values = [{ id: null, name: SHELF_CONTROL.placeholder }, ...shelves] as any)\n\t\t// \t\tthis.filtersState.updateFilterValues(SHELF_CONTROL.paramName, shelves);\n\t\t// \t});\n\t\t// } else if (filter?.paramName === FilterType.MANUFACTURER && form.get(FilterType.MANUFACTURER).value) {\n\t\t// \tconst PRODUCT_CONTROL = this.getFilter(FilterType.PRODUCT);\n\t\t// \tthis.httpGetControlValues(\n\t\t// \t\tthis.filtersApi.getFilterValue(PRODUCT_CONTROL.valuesEndpoint, {\n\t\t// \t\t\tmanufacturerId: form.get(FilterType.MANUFACTURER).value,\n\t\t// \t\t}),\n\t\t// \t\tform,\n\t\t// \t\tPRODUCT_CONTROL.paramName\n\t\t// \t).subscribe((products: any) => (PRODUCT_CONTROL.values = [{ id: null, name: PRODUCT_CONTROL.placeholder }, ...products] as any));\n\t\t// }\n\t\t// get filtersChips$(): Observable<FiltersChip[]> {\n\t\t// \treturn this.filtersState.filtersChips$;\n\t\t// }\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAM,eAAsC;EAC3C;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,MAAM;;EAEP;IACC,IAAI;IACJ,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",
  "names": ["filter", "response"]
}
