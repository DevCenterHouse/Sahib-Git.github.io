{
  "version": 3,
  "sources": ["apps/findqo-ireland/src/assets/scss/utils/_mixins.scss", "apps/findqo-ireland/src/app/feature/agent-hub/pages/leads/leads.component.scss", "node_modules/bootstrap/scss/mixins/_breakpoints.scss"],
  "sourcesContent": ["@import 'bootstrap/scss/functions', 'bootstrap/scss/variables', 'bootstrap/scss/mixins';\n\n// NOTE: The breakpoints should be same the as breakpoint observer in APP.INITIALIZER\n// Breakpoints are same with the Bootstrap v5.0.\n// @links https://getbootstrap.com/docs/5.0/layout/breakpoints/\n\n/* BOOTSTRAP BREAKPOINT MIXINS */\n// Min-width\n// @include media-breakpoint-up(sm) { ... }\n// @include media-breakpoint-up(md) { ... }\n// @include media-breakpoint-up(lg) { ... }\n// @include media-breakpoint-up(xl) { ... }\n// @include media-breakpoint-up(xxl) { ... }\n\n// Single breakpoint\n// @include media-breakpoint-only(xs) { ... }\n// @include media-breakpoint-only(sm) { ... }\n// @include media-breakpoint-only(md) { ... }\n// @include media-breakpoint-only(lg) { ... }\n// @include media-breakpoint-only(xl) { ... }\n// @include media-breakpoint-only(xxl) { ... }\n\n// No media query necessary for xs breakpoint as it's effectively `@media (max-width: 0) { ... }`\n// @include media-breakpoint-down(sm) { ... }\n// @include media-breakpoint-down(md) { ... }\n// @include media-breakpoint-down(lg) { ... }\n// @include media-breakpoint-down(xl) { ... }\n// @include media-breakpoint-down(xxl) { ... }\n\n// TODO: Removed the custom mixins belowe as we will now use the mixins from Bootstrap for media queries.\n\n// xs - sm\n@mixin mobile-only {\n\t@media all and (max-width: 576px) {\n\t\t@content;\n\t}\n}\n\n// xs - md\n@mixin mobile-and-small-tablet-only {\n\t@media all and (max-width: 768px) {\n\t\t@content;\n\t}\n}\n\n// sm - xl\n@mixin tablet-only {\n\t@media all and (min-width: 576px) and (max-width: 1199px) {\n\t\t@content;\n\t}\n}\n\n// xl up\n@mixin desktop-only {\n\t@media all and (min-width: 1200px) {\n\t\t@content;\n\t}\n}\n\n// xxl up\n@mixin big-desktop-only {\n\t@media all and (min-width: 1400px) {\n\t\t@content;\n\t}\n}\n", "@import 'assets/scss/utils/mixins';\n\n.badge-admin {\n\tbackground-color: var(--prim-2);\n\tcolor: var(--basic-1);\n}\n\n.badge-accepted {\n\tbackground-color: var(--success-1);\n\tcolor: var(--success-3);\n}\n\n.badge-pending {\n\tbackground-color: var(--general-1);\n\tcolor: var(--general-3);\n}\n\n.badge-rejected {\n\tbackground-color: var(--error-3);\n\tcolor: var(--basic-1);\n}\n\n.icon-18px {\n\tfont-size: 18px;\n\twidth: 18px;\n\theight: 18px;\n\tmin-width: 18px;\n}\n\n.icon-20px {\n\tfont-size: 20px;\n\twidth: 20px;\n\theight: 20px;\n}\n\n.no-wrap {\n\twhite-space: nowrap;\n}\n\n.table-container {\n\tfont-family: 'Poppins', sans-serif !important;\n\tmax-height: calc(100dvh - 320px);\n\n\toverflow: auto;\n\tscrollbar-color: var(--general-2);\n\tscrollbar-width: thin;\n\n\t&::-webkit-scrollbar {\n\t\twidth: 8px;\n\t\theight: 8px;\n\t}\n\n\t&::-webkit-scrollbar-thumb {\n\t\tborder-radius: 100px;\n\t\tbackground: var(--general-2);\n\t}\n}\n\n.mat-cell {\n\twhite-space: nowrap;\n}\n\n.lead-search {\n\twidth: 365px;\n\n\t@media (max-width: 576px) {\n\t\twidth: 60vw !important;\n\t}\n}\n\n.w-100 {\n\twidth: 100%;\n}\n\n.w-365 {\n\twidth: 365px;\n\tmax-width: 365px;\n}\n\n.w-265 {\n\twidth: 265px !important;\n\tmax-width: 265px !important;\n}\n\n.mat-mdc-header-cell {\n\tbackground: var(--general-1) !important;\n}\n\nth,\ntd {\n\tfont-family: 'Poppins', sans-serif !important;\n\toverflow: hidden;\n\twidth: auto;\n\ttext-overflow: ellipsis;\n\twhite-space: nowrap;\n\tvertical-align: middle;\n\theight: 60px;\n}\n\n.action-btn {\n\twidth: 30px;\n\theight: 30px;\n}\n\n.status-badge {\n\twidth: 75px;\n\theight: 22px;\n\tborder: none !important;\n\tborder-radius: 100px !important;\n}\n\n.h-40px {\n\theight: 40px;\n}\n\n.mb-75px {\n\tmargin-bottom: 75px;\n}\n\n.image-dimensions {\n\twidth: 60px;\n\theight: 44px;\n}\n\n@include media-breakpoint-up(md) {\n\t.mb-65px {\n\t\tmargin-bottom: 0px;\n\t}\n\n\t.w-350 {\n\t\twidth: 350px;\n\t}\n\n\t.w-365 {\n\t\twidth: 365px;\n\t}\n\n\t.table-container {\n\t\tmax-height: calc(100dvh - 222px);\n\t}\n}\n\n.min-max-dd {\n\twidth: 300px;\n\tborder-radius: 5px;\n\tbackground: #fff;\n\ttext-align: center;\n\tbox-shadow:\n\t\t0px 5px 5px -3px rgba(0, 0, 0, 0.2),\n\t\t0px 8px 10px 1px rgba(0, 0, 0, 0.14),\n\t\t0px 3px 14px 2px rgba(0, 0, 0, 0.12);\n\toutline: 0;\n\toverflow: auto;\n\tborder-radius: 4px;\n\tbox-sizing: border-box;\n\tposition: static;\n}\n\n.business-name-width {\n\t@include media-breakpoint-down(sm) {\n\t\twidth: 150px !important;\n\t}\n}\n\ninput.search-location {\n\tborder: 1px solid var(--general-2);\n\theight: 40px !important;\n\tborder-radius: 4px;\n\n\t&:focus {\n\t\toutline: unset !important;\n\t}\n\n\t&::placeholder {\n\t\tcolor: var(--general-2);\n\t}\n}\n\n.w-slider {\n\twidth: 70%;\n}\n\ndiv.search-container {\n\tposition: sticky;\n\ttop: 0;\n\twidth: 100%;\n\tbackground: var(--basic-1);\n\tz-index: 99;\n}\n\n.slider-clear {\n\tpadding-top: 14px;\n}\n", "// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n"],
  "mappings": ";ACEA,CAAA;AACC,oBAAA,IAAA;AACA,SAAA,IAAA;;AAGD,CAAA;AACC,oBAAA,IAAA;AACA,SAAA,IAAA;;AAGD,CAAA;AACC,oBAAA,IAAA;AACA,SAAA,IAAA;;AAGD,CAAA;AACC,oBAAA,IAAA;AACA,SAAA,IAAA;;AAGD,CAAA;AACC,aAAA;AACA,SAAA;AACA,UAAA;AACA,aAAA;;AAGD,CAAA;AACC,aAAA;AACA,SAAA;AACA,UAAA;;AAGD,CAAA;AACC,eAAA;;AAGD,CAAA;AACC,eAAA,SAAA,EAAA;AACA,cAAA,KAAA,OAAA,EAAA;AAEA,YAAA;AACA,mBAAA,IAAA;AACA,mBAAA;;AAEA,CARD,eAQC;AACC,SAAA;AACA,UAAA;;AAGD,CAbD,eAaC;AACC,iBAAA;AACA,cAAA,IAAA;;AAIF,CAAA;AACC,eAAA;;AAGD,CAAA;AACC,SAAA;;AAEA,OAAA,CAAA,SAAA,EAAA;AAHD,GAAA;AAIE,WAAA;;;AAIF,CAAA;AACC,SAAA;;AAGD,CAAA;AACC,SAAA;AACA,aAAA;;AAGD,CAAA;AACC,SAAA;AACA,aAAA;;AAGD,CAAA;AACC,cAAA,IAAA;;AAGD;AAAA;AAEC,eAAA,SAAA,EAAA;AACA,YAAA;AACA,SAAA;AACA,iBAAA;AACA,eAAA;AACA,kBAAA;AACA,UAAA;;AAGD,CAAA;AACC,SAAA;AACA,UAAA;;AAGD,CAAA;AACC,SAAA;AACA,UAAA;AACA,UAAA;AACA,iBAAA;;AAGD,CAAA;AACC,UAAA;;AAGD,CAAA;AACC,iBAAA;;AAGD,CAAA;AACC,SAAA;AACA,UAAA;;AC1DG,OAAA,CAAA,SAAA,EAAA;AD8DH,GAAA;AACC,mBAAA;;AAGD,GAAA;AACC,WAAA;;AAGD,GA3DD;AA4DE,WAAA;;AAGD,GAlGD;AAmGE,gBAAA,KAAA,OAAA,EAAA;;;AAIF,CAAA;AACC,SAAA;AACA,iBAAA;AACA,cAAA;AACA,cAAA;AACA;IACC,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAGD,WAAA;AACA,YAAA;AACA,iBAAA;AACA,cAAA;AACA,YAAA;;AC/EG,OAAA,CAAA,SAAA,EAAA;ADkFJ,GAAA;AAEE,WAAA;;;AAIF,KAAA,CAAA;AACC,UAAA,IAAA,MAAA,IAAA;AACA,UAAA;AACA,iBAAA;;AAEA,KAAA,CALD,eAKC;AACC,WAAA;;AAGD,KAAA,CATD,eASC;AACC,SAAA,IAAA;;AAIF,CAAA;AACC,SAAA;;AAGD,GAAA,CAAA;AACC,YAAA;AACA,OAAA;AACA,SAAA;AACA,cAAA,IAAA;AACA,WAAA;;AAGD,CAAA;AACC,eAAA;;",
  "names": []
}
