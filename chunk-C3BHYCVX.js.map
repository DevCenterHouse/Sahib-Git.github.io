{
  "version": 3,
  "sources": ["apps/findqo-ireland/src/app/shared/states/filters.state.ts", "apps/findqo-ireland/src/app/feature/general/filters/utils/filters.utils.ts", "apps/findqo-ireland/src/app/feature/general/filters/services/filters.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { Params } from '@angular/router';\nimport { FilterType } from '@core/enums';\nimport { Filter, FilterDropdownValue } from '@core/models/filters.model';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class FiltersState {\n\tprivate readonly _filters$ = new BehaviorSubject<Filter[]>([]);\n\tprivate readonly _selectedFilterCount$ = new BehaviorSubject<number>(0);\n\tprivate readonly _isFiltersValueLoading$ = new BehaviorSubject<boolean>(false);\n\tprivate readonly _isLoading$ = new BehaviorSubject<boolean>(false);\n\tprivate readonly _countyList$ = new BehaviorSubject<FilterDropdownValue[]>([]);\n\n\tget filters$(): Observable<Filter[]> {\n\t\treturn this._filters$.asObservable();\n\t}\n\n\tget selectedFilterCount$(): Observable<number> {\n\t\treturn this._selectedFilterCount$.asObservable();\n\t}\n\n\tget isFiltersValueLoading$(): Observable<boolean> {\n\t\treturn this._isFiltersValueLoading$.asObservable();\n\t}\n\n\tget isLoading$(): Observable<boolean> {\n\t\treturn this._isLoading$.asObservable();\n\t}\n\n\tget countyList$(): Observable<FilterDropdownValue[]> {\n\t\treturn this._countyList$.asObservable();\n\t}\n\n\tgetFilters(): Filter[] {\n\t\treturn this._filters$.getValue();\n\t}\n\n\tsetFilters(filters: Filter[]): void {\n\t\tthis._filters$.next(filters);\n\t}\n\n\tsetIsFilterValueLoading(isLoading: boolean): void {\n\t\tthis._isFiltersValueLoading$.next(isLoading);\n\t}\n\n\tsetIsLoading(isLoading: boolean): void {\n\t\tthis._isLoading$.next(isLoading);\n\t}\n\n\tsetCountyList(countyList: FilterDropdownValue[]): void {\n\t\tthis._countyList$.next(countyList);\n\t}\n\n\tsetSelectedFilterCount(params: Params): void {\n\t\tthis._selectedFilterCount$.next(this.countNonEmptyKeys(params));\n\t}\n\n\tremoveFilterValues(paramName: string): void {\n\t\tconst CURRENT_FILTERS = this._filters$.getValue();\n\t\tconst FILTERS_INDEX = CURRENT_FILTERS.findIndex((filter: Filter) => filter.paramName === paramName);\n\t\tCURRENT_FILTERS[FILTERS_INDEX] = { ...CURRENT_FILTERS[FILTERS_INDEX], values: [] as any };\n\n\t\tthis.setFilters([...CURRENT_FILTERS]);\n\t}\n\n\tupdateFilter(updateFilter: Filter): void {\n\t\tconst NEW_FILTERS = this._filters$.getValue();\n\t\tconst FILTER_INDEX = NEW_FILTERS.findIndex((filter: Filter) => filter.paramName === updateFilter.paramName);\n\n\t\tNEW_FILTERS[FILTER_INDEX] = { ...NEW_FILTERS[FILTER_INDEX], ...updateFilter };\n\n\t\tthis.setFilters([...NEW_FILTERS]);\n\t}\n\n\tprivate countNonEmptyKeys(obj) {\n\t\t//TODO: Investigate if more keys can be excluded\n\t\tconst UN_COUNTED_KEYS = [FilterType.SECTION, FilterType.AISLE, FilterType.SORT, 'perPage'];\n\t\tlet count = 0;\n\n\t\tfor (const key in obj) {\n\t\t\tconst IS_INCLUDED = !UN_COUNTED_KEYS.toString().includes(key);\n\t\t\tif (IS_INCLUDED && obj.hasOwnProperty(key) && obj[key] && obj[key] !== '' && !(Array.isArray(obj[key]) && obj[key].length === 0)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\n\t\treturn count === 0 ? null : count;\n\t}\n\n\t// TODO: Remove all filters chips related code on one PR so it's easy to track the changes if we need it again.\n\t// private readonly _filtersChips$ = new BehaviorSubject<FiltersChip[]>([]);\n\n\t// setFiltersChips(filtersChips: FiltersChip[]): void {\n\t// \tthis._filtersChips$.next(filtersChips);\n\t// }\n\n\t// get filtersChips$(): Observable<FiltersChip[]> {\n\t// \treturn this._filtersChips$.asObservable();\n\t// }\n}\n", "import { Params } from '@angular/router';\nimport { FilterTemplateType, FilterType } from '@core/enums';\nimport { Filter, FilterDropdownValue } from '@core/models';\nimport { CommonUtil } from '@core/utils/common.util';\nimport { ADS_FILTERS } from '../constants/filters.constants';\n\nexport class FiltersUtil {\n\t/**\n\t * Build query params that will be added in route\n\t */\n\tstatic createQueryParams = <T>(formValue: T): Params => {\n\t\treturn Object.keys(formValue).reduce((accumulator: Params, key: string) => {\n\t\t\t// Stand, Shelf is not needed in query params\n\t\t\tif (key === FilterType.STAND || key === FilterType.SHELF || key === FilterType.LOCATION_REFERENCE) {\n\t\t\t\treturn accumulator;\n\t\t\t}\n\n\t\t\tif (CommonUtil.isTypeOfObject(formValue[key])) {\n\t\t\t\taccumulator[key] = formValue[key].map((value: { id: string }) => value.id);\n\t\t\t} else if (formValue[key]) {\n\t\t\t\taccumulator[key] = formValue[key];\n\t\t\t}\n\n\t\t\treturn accumulator;\n\t\t}, {});\n\t};\n\n\t/**\n\t * Build query params that will be added in route\n\t */\n\tstatic createAdListRequetParams = <T>(formValue: T): Params => {\n\t\treturn Object.keys(formValue).reduce((accumulator: Params, key: string) => {\n\t\t\tif (CommonUtil.isTypeOfObject(formValue[key])) {\n\t\t\t\taccumulator[key] = formValue[key].map((value: { id: string }) => value.id);\n\t\t\t} else if (formValue[key]) {\n\t\t\t\taccumulator[key] = formValue[key];\n\t\t\t}\n\n\t\t\treturn accumulator;\n\t\t}, {});\n\t};\n\n\t/**\n\t * Build mutli selection control value from query params\n\t */\n\tstatic queryParamsToMultiSelectionControlValue = (queryParams: string[] | string): FilterDropdownValue[] => {\n\t\tlet controlValue = [];\n\n\t\tif (Array.isArray(queryParams)) {\n\t\t\tcontrolValue = queryParams.map((id: string) => {\n\t\t\t\treturn {\n\t\t\t\t\tid,\n\t\t\t\t};\n\t\t\t});\n\t\t} else if (queryParams) {\n\t\t\tcontrolValue = [\n\t\t\t\t{\n\t\t\t\t\tid: queryParams,\n\t\t\t\t},\n\t\t\t];\n\t\t}\n\n\t\treturn controlValue;\n\t};\n\n\t/**\n\t * Update the form value from the values of query params\n\t */\n\tstatic updateFormValueFromQueryParams = (queryParams: Params): Params => {\n\t\t// Get all multi selection Filter\n\t\tconst MULTI_SELECTION_FILTER_LIST = ADS_FILTERS.filter((filter: Filter) => filter.templateType === FilterTemplateType.MULTI_SELECTION).map(\n\t\t\t(filter: Filter) => filter.paramName\n\t\t);\n\n\t\treturn Object.keys(queryParams).reduce((accumulator: Params, key: FilterType) => {\n\t\t\tif (MULTI_SELECTION_FILTER_LIST.includes(key) && Array.isArray(queryParams[key])) {\n\t\t\t\t/**\n\t\t\t\t * Check if query param is multi selection Filter.\n\t\t\t\t **/\n\n\t\t\t\t// Populate the new form value with an id of array<object>\n\t\t\t\taccumulator[key] = queryParams[key].map((id: string) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tid,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t} else if (queryParams[key] && MULTI_SELECTION_FILTER_LIST.includes(key)) {\n\t\t\t\t/**\n\t\t\t\t * If the query param is a multi selection but not an array still we need to create a new form value with an id of array<object>.\n\t\t\t\t */\n\t\t\t\taccumulator[key] = [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: queryParams[key],\n\t\t\t\t\t},\n\t\t\t\t];\n\t\t\t} else if (queryParams[key]) {\n\t\t\t\taccumulator[key] = queryParams[key];\n\t\t\t}\n\n\t\t\treturn accumulator;\n\t\t}, {});\n\t};\n\n\t/**\n\t * Get the filter value from the list via dynamic key\n\t */\n\tstatic getFilterDropdownValue = (filterValueList: FilterDropdownValue[], key: string, value: string): FilterDropdownValue => {\n\t\treturn filterValueList.find((filterValue: FilterDropdownValue) => filterValue[key] === value);\n\t};\n\n\t/**\n\t * Returns true if the Filter is changed based on object keys\n\t */\n\tstatic isFilterListChanged = (previousFilterList: string[], filterList: Filter[]) => {\n\t\tconst FILTER_KEY_LIST = filterList.map((filter: Filter) => filter.paramName);\n\n\t\treturn previousFilterList.some((filter: string) => !FILTER_KEY_LIST.includes(filter as FilterType) && filter !== FilterType.SORT);\n\t};\n}\n", "import { Injectable } from '@angular/core';\nimport { AbstractControl, FormArray, FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { CountyType, FilterTemplateType, FilterType } from '@core/enums';\nimport { Filter, FilterDropdownValue } from '@core/models/filters.model';\nimport { CommonUtil } from '@core/utils/common.util';\nimport { FiltersUtil } from '../utils/filters.utils';\nimport { BreadcrumbsState } from '@shared/states/breadcrumbs.state';\nimport { FiltersState } from '@shared/states/filters.state';\nimport { RouteDataType, RouteService } from '@core/services/route.service';\n\n// TODO: Check if this should provided in `root` level\n// TODO: Remove all related code `range`, `latitude` and `longtitude as it's not being used.\n@Injectable({ providedIn: 'root' })\nexport class FiltersService {\n\tconstructor(\n\t\tprivate readonly router: Router,\n\t\tprivate readonly route: ActivatedRoute,\n\t\tprivate readonly fb: FormBuilder,\n\t\tprivate readonly breadcrumbState: BreadcrumbsState,\n\t\tprivate readonly filterState: FiltersState,\n\t\tprivate readonly routeService: RouteService\n\t) {}\n\n\tprivate _filtersForm: FormGroup;\n\tprivate _othersForm: FormGroup;\n\tprivate _locations = new FormArray([]);\n\n\t// Easy getter for the form controls\n\tget fc(): { [p: string]: AbstractControl } {\n\t\treturn this._filtersForm.controls;\n\t}\n\n\tget othersFc(): { [p: string]: AbstractControl } {\n\t\treturn this._othersForm.controls;\n\t}\n\n\tget locations() {\n\t\treturn this._locations as FormArray;\n\t}\n\n\tupdateForm(queryParams: Params): void {\n\t\tconst NEW_FORM_VALUE = FiltersUtil.updateFormValueFromQueryParams(queryParams);\n\n\t\tthis._filtersForm.reset(NEW_FORM_VALUE);\n\t\tthis._filtersForm.updateValueAndValidity();\n\t}\n\n\tupdateControlValue(filter: Filter, value: string): void {\n\t\tthis.fc[filter.paramName].patchValue(value);\n\n\t\tif (filter?.childReferenceParamName) {\n\t\t\tif (filter.paramName === FilterType.MANUFACTURER) {\n\t\t\t\tif (this.fc[FilterType.PRODUCT]?.value) {\n\t\t\t\t\t(this.fc[FilterType.PRODUCT] as FormArray).clear();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.fc[filter.childReferenceParamName].patchValue('');\n\t\t\t}\n\t\t}\n\t}\n\n\tupdateControlArrayValue(filter: Filter, selectedFilterValue: FilterDropdownValue): void {\n\t\tconst SELECTED_OPTION_LIST = this.fc[filter.paramName].value;\n\t\tconst IS_FILTER_VALUE_SELECTED = SELECTED_OPTION_LIST.some((filterValue: FilterDropdownValue) => filterValue.id === selectedFilterValue.id);\n\n\t\t// TODO: Check why we are removing the filter control if the Filter was already selected.\n\t\tif (IS_FILTER_VALUE_SELECTED) {\n\t\t\tconst INDEX = (this.fc[filter.paramName] as FormArray).value.findIndex((filterValue: FilterDropdownValue) => filterValue.id === selectedFilterValue.id);\n\n\t\t\t(this.fc[filter.paramName] as FormArray).removeAt(INDEX);\n\t\t} else {\n\t\t\t(this.fc[filter.paramName] as FormArray).push(\n\t\t\t\tthis.fb.group({\n\t\t\t\t\t...selectedFilterValue,\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Update location\n\t */\n\tupdateLocation(position: GeolocationPosition): void {\n\t\tthis.fc[FilterType.RANGE].patchValue('100');\n\t\tthis.othersFc[FilterType.LATITUDE].patchValue(position.coords.latitude);\n\t\tthis.othersFc[FilterType.LONGTITUDE].patchValue(position.coords.longitude);\n\t\tthis.othersFc[FilterType.IS_SEARCH_NEAR_ME].patchValue(true);\n\t}\n\n\t/**\n\t * Update min max form control value\n\t */\n\tupdateMinMaxValue(filter: Filter, min: number, max: number): void {\n\t\tconst MIN_HOLDER = Math.min(min, max);\n\t\tmax = Math.max(min, max);\n\t\tmin = MIN_HOLDER;\n\n\t\tthis.fc[filter.paramName].patchValue(`${min},${max}`);\n\t}\n\n\tupdateLocationField(value: string[]) {\n\t\tthis.locations.clear();\n\n\t\tif (value?.length) {\n\t\t\tconst UNIQUE_VALUES = [...new Set(value.join(',').split(','))].filter((val) => !!val);\n\n\t\t\tUNIQUE_VALUES.forEach((val) => {\n\t\t\t\tif (val !== CountyType.DEFAULT) {\n\t\t\t\t\tthis.locations.push(new FormControl(val));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tupdateRoute(): void {\n\t\t/**\n\t\t * Update route if the page has params for Filters\n\t\t *\n\t\t * Home page doesn't have any params for Filters, so we don't need to update it's page route.\n\t\t */\n\t\t// Clean the form value params by removing empty values (undefined, null, etc...).\n\n\t\t// This is the current Activated Route\n\t\tconst CURRENT_ROUTE = this.router.routerState.root.firstChild;\n\t\tlet firstLocation;\n\t\tlet otherLocations;\n\n\t\t// if form having some locations update the params\n\t\tif (this.locations?.value.length) {\n\t\t\tconst UNIQUES_LOCATIONS = [...new Set(this.locations?.value.join(',').split(','))];\n\t\t\tconst [FIRST_LOCATION, ...OTHER_LOCATIONS] = UNIQUES_LOCATIONS;\n\n\t\t\tfirstLocation = FIRST_LOCATION;\n\t\t\totherLocations = OTHER_LOCATIONS.length ? OTHER_LOCATIONS?.join(',') : '';\n\t\t}\n\n\t\tthis.updateLocationField([firstLocation, otherLocations]);\n\n\t\tif (!this._filtersForm) return;\n\n\t\tconst FORM_VALUE = CommonUtil.removeEmptyQueryParams({\n\t\t\t...this._filtersForm?.value,\n\t\t\t...(this.fc[FilterType.RANGE]?.value && {\n\t\t\t\t[FilterType.LATITUDE]: this.othersFc[FilterType.LATITUDE].value,\n\t\t\t\t[FilterType.LONGTITUDE]: this.othersFc[FilterType.LONGTITUDE].value,\n\t\t\t\t[FilterType.LOCATION_REFERENCE]: CURRENT_ROUTE.snapshot.queryParams[FilterType.LOCATION_REFERENCE],\n\t\t\t}),\n\t\t});\n\n\t\t// Create params the will be displayed on the route.\n\t\tconst QUERY_PARAMS = FiltersUtil.createQueryParams(FORM_VALUE);\n\n\t\tif (otherLocations) {\n\t\t\tQUERY_PARAMS[FilterType.LOCATION_REFERENCE] = otherLocations;\n\t\t}\n\n\t\tconst URL_FRAGMENTS = [\n\t\t\t'/',\n\t\t\tCURRENT_ROUTE.snapshot.params?.[FilterType.SECTION] || CURRENT_ROUTE.snapshot.data?.[FilterType.SECTION],\n\t\t\tfirstLocation ? firstLocation : CountyType.DEFAULT,\n\t\t\tCURRENT_ROUTE.snapshot.params?.[FilterType.AISLE] || CURRENT_ROUTE.snapshot?.data[FilterType.AISLE],\n\t\t];\n\n\t\t// Add the stand value as a route params\n\t\tif (this.fc[FilterType.STAND]?.value) {\n\t\t\tURL_FRAGMENTS.push(this.fc[FilterType.STAND].value);\n\t\t}\n\n\t\t// Add the shelf value as a route params\n\t\tif (this.fc[FilterType.SHELF]?.value) {\n\t\t\tURL_FRAGMENTS.push([...this.fc[FilterType.STAND].value, ...this.fc[FilterType.SHELF].value]);\n\t\t}\n\n\t\tthis.breadcrumbState.setbreadcrumbsParams(URL_FRAGMENTS, QUERY_PARAMS);\n\n\t\tthis.filterState.setSelectedFilterCount(this._filtersForm.value);\n\n\t\t// Navigate to the updated route\n\t\tthis.router.navigate(URL_FRAGMENTS, {\n\t\t\trelativeTo: CURRENT_ROUTE,\n\t\t\tqueryParams: QUERY_PARAMS,\n\t\t});\n\t}\n\n\tgetFormValue(): Params {\n\t\tconst FORM_VALUE = CommonUtil.removeEmptyQueryParams({\n\t\t\t...this._filtersForm.value,\n\t\t\t...(this.fc[FilterType.RANGE]?.value && {\n\t\t\t\t[FilterType.LATITUDE]: this.othersFc[FilterType.LATITUDE].value,\n\t\t\t\t[FilterType.LONGTITUDE]: this.othersFc[FilterType.LONGTITUDE].value,\n\t\t\t}),\n\t\t});\n\n\t\treturn FiltersUtil.createQueryParams(FORM_VALUE);\n\t}\n\n\tcreateGetAdListRequestParams(): Params {\n\t\treturn FiltersUtil.createAdListRequetParams(CommonUtil.removeEmptyQueryParams({ ...this._filtersForm.value }));\n\t}\n\n\t/**\n\t * If the selected Filter value didn't saved (via closing the menu) then restore the previous Filter value\n\t */\n\trestorePreviousFilterValue(filter: Filter, currentControlValue: string & FilterDropdownValue[]): void {\n\t\tif (filter.isMinMax) {\n\t\t\tconst SAVED_MINMAX = currentControlValue && currentControlValue?.split(',');\n\n\t\t\tif (SAVED_MINMAX) {\n\t\t\t\tthis.updateMinMaxValue(filter, +SAVED_MINMAX[0], +SAVED_MINMAX[1]);\n\t\t\t} else {\n\t\t\t\tthis.fc[filter.paramName].patchValue('');\n\t\t\t}\n\t\t} else if (filter.templateType === FilterTemplateType.MULTI_SELECTION) {\n\t\t\tconst SAVED_OPTION_LIST = currentControlValue;\n\t\t\tthis.resetFormArray(filter.paramName);\n\n\t\t\tSAVED_OPTION_LIST.forEach((savedOption: FilterDropdownValue) =>\n\t\t\t\t(this.fc[filter.paramName] as FormArray).push(\n\t\t\t\t\tthis.fb.group({\n\t\t\t\t\t\tid: savedOption.id,\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Restore the form values from the original values\n\t *\n\t * @param formValue Current form value\n\t */\n\trestoreAllPreviousFilterValue(currentFormValue: Params): void {\n\t\tObject.keys(currentFormValue).forEach((paramName: FilterType) => {\n\t\t\tif (Array.isArray(currentFormValue[paramName])) {\n\t\t\t\tconst SAVED_OPTION_LIST = [...currentFormValue[paramName]];\n\t\t\t\tthis.resetFormArray(paramName);\n\n\t\t\t\tSAVED_OPTION_LIST.forEach((savedOption: FilterDropdownValue) =>\n\t\t\t\t\t(this.fc[paramName] as FormArray).push(\n\t\t\t\t\t\tthis.fb.group({\n\t\t\t\t\t\t\tid: savedOption.id,\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.fc[paramName].patchValue(currentFormValue[paramName]);\n\t\t\t}\n\t\t});\n\t}\n\n\tselectAllFilterDropdownMultiOption(filter: Filter, filterValueList: FilterDropdownValue[], isSelectedAll: boolean): void {\n\t\tconst SELECTED_VALUE_LIST = this.fc[filter.paramName].value as FilterDropdownValue[];\n\n\t\tif (isSelectedAll) {\n\t\t\tthis.resetFormArray(filter.paramName);\n\t\t} else {\n\t\t\tfilterValueList.forEach((filterValue: FilterDropdownValue) => {\n\t\t\t\tconst IS_SELECTED = SELECTED_VALUE_LIST.some((selected: FilterDropdownValue) => selected.id === filterValue.id);\n\n\t\t\t\tif (!IS_SELECTED) {\n\t\t\t\t\t(this.fc[filter.paramName] as FormArray).push(\n\t\t\t\t\t\tthis.fb.group({\n\t\t\t\t\t\t\t...filterValue,\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tclearFilterControl(filter: Filter): void {\n\t\tswitch (filter.templateType) {\n\t\t\tcase FilterTemplateType.MULTI_SELECTION:\n\t\t\t\tthis.resetFormArray(filter.paramName);\n\n\t\t\t\tbreak;\n\t\t\tcase FilterTemplateType.SINGLE_SELECTION:\n\t\t\tcase FilterTemplateType.MIN_MAX_DROPDOWN:\n\t\t\tcase FilterTemplateType.MIN_MAX_INPUT:\n\t\t\t\tthis.fc[filter.paramName].patchValue(null);\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t}\n\n\t/**\n\t * Reset the Filters\n\t *\n\t * Clear all values in the form and query params and navigate back on the original route with only section and aisle params.\n\t */\n\tclearAllFilterControl(): void {\n\t\tif (this._filtersForm) {\n\t\t\tthis._filtersForm?.reset();\n\t\t\tconst FORM_VALUE = { ...this._filtersForm.value };\n\n\t\t\tObject.keys(FORM_VALUE).forEach((paramName: FilterType) => {\n\t\t\t\tconst CONTROL = this._filtersForm.controls[paramName];\n\n\t\t\t\tif (Array.isArray(FORM_VALUE[paramName])) {\n\t\t\t\t\tthis.resetFormArray(paramName);\n\t\t\t\t} else {\n\t\t\t\t\tthis.fc[paramName].patchValue(FORM_VALUE[paramName]);\n\t\t\t\t}\n\n\t\t\t\tCONTROL.markAsPristine();\n\t\t\t\tCONTROL.markAsUntouched();\n\t\t\t\tCONTROL.setErrors(null);\n\t\t\t});\n\t\t}\n\n\t\t// clear all selected locations\n\t\tthis.locations?.clear();\n\n\t\t// This is the current Activated Route.\n\t\tconst CURRENT_ROUTE_PARAMS = this.router.routerState.root.firstChild.snapshot.params;\n\n\t\t// Navigate on start of the route with only section and aisle params.\n\t\tthis.router.navigate([CURRENT_ROUTE_PARAMS['section'], CountyType.DEFAULT, CURRENT_ROUTE_PARAMS['aisle']]);\n\t}\n\n\t/**\n\t * Create Filters form\n\t *\n\t * @param filterList\n\t */\n\tcreateFilterForm(filterList: Filter[], params: Params): void {\n\t\tconst PREVIOUS_FORM_VALUE = this._filtersForm?.value;\n\n\t\t// Reset the form if it's already created\n\t\tif (!this._filtersForm) {\n\t\t\tthis._filtersForm = undefined;\n\t\t}\n\n\t\t// Get the current query params\n\t\t// Always reset the range related params\n\t\tconst {\n\t\t\t[FilterType.RANGE]: _,\n\t\t\t[FilterType.LATITUDE]: __,\n\t\t\t[FilterType.LONGTITUDE]: ___,\n\t\t\t...QUERY_PARAMS\n\t\t} = CommonUtil.removeEmptyQueryParams({ ...this.route.snapshot.queryParams, ...this.route.snapshot.params });\n\n\t\tthis._filtersForm = this.fb.group({\n\t\t\t[FilterType.SORT]: [QUERY_PARAMS?.[FilterType.SORT] ? QUERY_PARAMS?.[FilterType.SORT] : ''],\n\t\t\t// [FilterType.RANGE]: [], // Only for Iraq version (V1)\n\t\t});\n\n\t\t// Only for Iraq version (V1)\n\t\tthis._othersForm = this.fb.group({\n\t\t\t[FilterType.LATITUDE]: [],\n\t\t\t[FilterType.LONGTITUDE]: [],\n\t\t\t[FilterType.IS_SEARCH_NEAR_ME]: [],\n\t\t});\n\n\t\tfilterList.forEach(async (filter: Filter) => {\n\t\t\t// If the Filter has previous value saved, then just set it again in the Filters form.\n\t\t\tconst FILTER_VALUE = PREVIOUS_FORM_VALUE?.[filter.paramName];\n\n\t\t\t// Set Filters form value\n\t\t\tif (filter.paramName === FilterType.STAND) {\n\t\t\t\tthis._filtersForm.addControl(filter.paramName, this.fb.control(PREVIOUS_FORM_VALUE ? FILTER_VALUE : params[RouteDataType.STAND]));\n\t\t\t} else if (filter.paramName === FilterType.SHELF) {\n\t\t\t\tthis._filtersForm.addControl(filter.paramName, this.fb.control(PREVIOUS_FORM_VALUE ? FILTER_VALUE : params[RouteDataType.SHELF]));\n\t\t\t} else if (filter.isMinMax) {\n\t\t\t\tthis._filtersForm.addControl(filter.paramName, this.fb.control(FILTER_VALUE || QUERY_PARAMS?.[filter.paramName] || ''));\n\t\t\t} else if (filter.templateType === FilterTemplateType.MULTI_SELECTION) {\n\t\t\t\tconst CONTROL_VALUE_LIST = FiltersUtil.queryParamsToMultiSelectionControlValue(QUERY_PARAMS?.[filter.paramName]);\n\n\t\t\t\tthis._filtersForm.addControl(filter.paramName, this.fb.array(PREVIOUS_FORM_VALUE ? FILTER_VALUE || [] : CONTROL_VALUE_LIST));\n\t\t\t} else {\n\t\t\t\tthis._filtersForm.addControl(filter.paramName, this.fb.control(PREVIOUS_FORM_VALUE ? FILTER_VALUE : QUERY_PARAMS?.[filter.paramName]));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Reset the form array value\n\t */\n\tresetFormArray(paramName: FilterType): void {\n\t\tif (this.fc[paramName]?.value) {\n\t\t\t(this.fc[paramName] as FormArray).clear();\n\t\t}\n\t}\n\n\t/**\n\t * If the filter has a child or dependent filter, then reset the value of the child filter.\n\t */\n\tresetFilterChildValue(filter: Filter): void {\n\t\tswitch (filter.paramName) {\n\t\t\tcase FilterType.MANUFACTURER:\n\t\t\t\tthis.resetFormArray(filter.childReferenceParamName);\n\t\t\t\tbreak;\n\n\t\t\tcase FilterType.STAND:\n\t\t\t\tthis.fc[filter.childReferenceParamName].patchValue('');\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t}\n\n\tresetService(): void {\n\t\tthis._filtersForm = undefined;\n\t\tthis._othersForm = undefined;\n\t}\n\n\t/**\n\t * Getters and setters\n\t */\n\n\tgetFiltersForm(): FormGroup {\n\t\treturn this._filtersForm;\n\t}\n\n\tgetOthersForm(): FormGroup {\n\t\treturn this._othersForm;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
