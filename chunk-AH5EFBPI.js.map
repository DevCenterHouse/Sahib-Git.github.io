{
  "version": 3,
  "sources": ["apps/findqo-ireland/src/app/core/services/sso-post-login.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AuthApi } from '@core/data-access/apis/auth.api';\nimport { AuthService } from '@core/data-access/services/auth.service';\nimport { ProfileState } from '@core/data-access/states/profile.state';\nimport { PostLoginAction, StorageType } from '@core/enums';\nimport { ClientUser } from '@core/models';\nimport { Observable, of, switchMap, tap } from 'rxjs';\nimport { IntercomService } from './intercom.service';\nimport { StorageService } from './storage.service';\n\ninterface PostLogin {\n\ttype: PostLoginAction;\n\tpayload: unknown;\n\tuserInitiatedSso: boolean;\n}\n\n/**\n * Service responsible for handling post-login processes after a successful login from SSO (Single Sign-On) logins.\n */\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class SsoPostLoginService {\n\tprivate readonly authApi = inject(AuthApi);\n\tprivate readonly authService = inject(AuthService);\n\tprivate readonly profileState = inject(ProfileState);\n\tprivate readonly intercomService = inject(IntercomService);\n\tprivate readonly storageService = inject(StorageService);\n\tprivate readonly matDialog = inject(MatDialog);\n\n\thandlePostLoginWithAction(handlers: { [key: string]: (payload: unknown) => void }): void {\n\t\tconst actionRaw = sessionStorage.getItem(StorageType.POST_LOGIN_SESSION);\n\t\tif (!actionRaw) return;\n\n\t\tconst action: PostLogin = JSON.parse(actionRaw);\n\t\tif (action?.userInitiatedSso) {\n\t\t\tconst handler = handlers[action?.type];\n\t\t\tconst payload = action?.payload;\n\n\t\t\tthis.authApi.googleAuthenticate().subscribe((response) => {\n\t\t\t\tconst user = response.data;\n\t\t\t\tthis.processUserAfterLogin(user);\n\t\t\t\tif (handler) {\n\t\t\t\t\thandler(payload);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tsessionStorage.removeItem(StorageType.POST_LOGIN_SESSION);\n\t}\n\n\thandlePostLoginWithoutAction$(): Observable<void> {\n\t\treturn this.authApi.googleAuthenticate().pipe(\n\t\t\ttap((response) => {\n\t\t\t\tconst user = response.data;\n\t\t\t\tthis.processUserAfterLogin(user);\n\t\t\t}),\n\t\t\tswitchMap(() => of(null)), // emit completion signal\n\t\t);\n\t}\n\n\tprivate processUserAfterLogin(user: ClientUser): void {\n\t\tthis.authService.login(user);\n\t\tthis.profileState.setUser(user);\n\t\tthis.intercomService.addIntercomUser(user);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAuBM,IAAO,sBAAP,MAAO,qBAAmB;EAHhC,cAAA;AAIkB,SAAA,UAAU,OAAO,OAAO;AACxB,SAAA,cAAc,OAAO,WAAW;AAChC,SAAA,eAAe,OAAO,YAAY;AAClC,SAAA,kBAAkB,OAAO,eAAe;AACxC,SAAA,iBAAiB,OAAO,cAAc;AACtC,SAAA,YAAY,OAAO,SAAS;;EAE7C,0BAA0B,UAAuD;AAChF,UAAM,YAAY,eAAe,QAAQ,YAAY,kBAAkB;AACvE,QAAI,CAAC;AAAW;AAEhB,UAAM,SAAoB,KAAK,MAAM,SAAS;AAC9C,QAAI,QAAQ,kBAAkB;AAC7B,YAAM,UAAU,SAAS,QAAQ,IAAI;AACrC,YAAM,UAAU,QAAQ;AAExB,WAAK,QAAQ,mBAAkB,EAAG,UAAU,CAAC,aAAY;AACxD,cAAM,OAAO,SAAS;AACtB,aAAK,sBAAsB,IAAI;AAC/B,YAAI,SAAS;AACZ,kBAAQ,OAAO;QAChB;MACD,CAAC;IACF;AAEA,mBAAe,WAAW,YAAY,kBAAkB;EACzD;EAEA,gCAA6B;AAC5B,WAAO,KAAK,QAAQ,mBAAkB,EAAG,KACxC,IAAI,CAAC,aAAY;AAChB,YAAM,OAAO,SAAS;AACtB,WAAK,sBAAsB,IAAI;IAChC,CAAC,GACD,UAAU,MAAM,GAAG,IAAI,CAAC,CAAC;EAE3B;EAEQ,sBAAsB,MAAgB;AAC7C,SAAK,YAAY,MAAM,IAAI;AAC3B,SAAK,aAAa,QAAQ,IAAI;AAC9B,SAAK,gBAAgB,gBAAgB,IAAI;EAC1C;;;uCA3CY,sBAAmB;IAAA;EAAA;;4EAAnB,sBAAmB,SAAnB,qBAAmB,WAAA,YAFnB,OAAM,CAAA;EAAA;;;sEAEN,qBAAmB,CAAA;UAH/B;WAAW;MACX,YAAY;KACZ;;;",
  "names": []
}
